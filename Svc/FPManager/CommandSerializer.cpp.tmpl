/**
 * \file CommandSerializer.cpp
 * \author Auto-coded
 * \brief Command Serializer implementation
 * This is generated by running the testcmd.sh script.
 *
 *
 * \copyright
 * Copyright 2009-2015, by the California Institute of Technology.
 * ALL RIGHTS RESERVED.  United States Government Sponsorship
 * acknowledged. Any commercial use must be negotiated with the Office
 * of Technology Transfer at the California Institute of Technology.
 * <br /><br />
 * This software may be subject to U.S. export control laws and
 * regulations.  By accepting this document, the user agrees to comply
 * with all U.S. export laws and regulations.  User has the
 * responsibility to obtain export licenses, or other export authority
 * as may be required before exporting such information to foreign
 * countries or providing access to foreign persons.
 */

\#include "CommandSerializer.hpp"
\#include "CommandOpcodes.hpp"
\#include "Fw/Com/ComPacket.hpp"

namespace Svc {

    namespace CommandSerializer {
  
  #for $cmd in $cmds:
  
    Fw::SerializeStatus
    $(cmd.command)(
          #for $arg in $cmd.argList:
              $arg[1] $arg[0],
          #end for
          Fw::ComBuffer& comBuffer
      )
    {
      Fw::SerializeStatus status;
      // Reset the buffer
      comBuffer.resetSer();
      // Serialize the command packet type
      FwPacketDescriptorType descriptor = Fw::ComPacket::FW_PACKET_COMMAND;
      status = comBuffer.serialize(descriptor);
      // Serialize the opcode
      if (status == Fw::FW_SERIALIZE_OK) {
        FwOpcodeType opcode = OPCODES::$cmd.command;
        status = comBuffer.serialize(opcode);
      }
      // Serialize arguments
      #for $arg in $cmd.argList:
      if (status == Fw::FW_SERIALIZE_OK) {
        status = comBuffer.serialize($arg[0]);
      }
      #end for
      return status;
    }
    
  #end for
  }
}

