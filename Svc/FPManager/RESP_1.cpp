/**
 * \file RESP_1.cpp
 * \author Auto-coded
 * \brief Implementation file for the RESP_1 response
 * This is generated by running the testcmd.sh script.
 *
 *
 * \copyright
 * Copyright 2009-2015, by the California Institute of Technology.
 * ALL RIGHTS RESERVED.  United States Government Sponsorship
 * acknowledged. Any commercial use must be negotiated with the Office
 * of Technology Transfer at the California Institute of Technology.
 * <br /><br />
 * This software may be subject to U.S. export control laws and
 * regulations.  By accepting this document, the user agrees to comply
 * with all U.S. export laws and regulations.  User has the
 * responsibility to obtain export licenses, or other export authority
 * as may be required before exporting such information to foreign
 * countries or providing access to foreign persons.
 */

#include <Svc/FPManager/RESP_1.hpp>
#include <Fw/Types/Assert.hpp>
#include <Svc/FPManager/CommandSerializer.hpp>



namespace Svc {

using namespace CommandSerializer;


  RESP_1::RESP_1() :
          Response(),
          runCounter(0)

  {
  }

  RESP_1::~RESP_1() {

  }

  bool RESP_1::run(Fw::ComBuffer& comBuffer) {

      Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
      bool respRunning = false;
      
      
     
      switch ( this->runCounter) {
      
      
      case 0:
      

          status = CMD_NO_OP(comBuffer);
          FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
          this->runCounter++;
          respRunning = true;
          break;       
      
      case 1:
      

          status = CMD_TEST_CMD_1(1048575, 3.1415, 96,comBuffer);
          FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
          this->runCounter++;
          respRunning = true;
          break;       
      
      case 2:
      

          status = CMD_TEST_CMD_1(2248575, 2.718, 97,comBuffer);
          FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
          this->runCounter++;
          respRunning = true;
          break;       
      
      case 3:
      

          status = CMD_TEST_CMD_1(3048575, 2.997, 98,comBuffer);
          FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
          this->runCounter++;
          respRunning = true;
          break;       
      
      case 4:
      

          status = CMD_CLEAR_TRACKING(comBuffer);
          FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
          this->runCounter++;
          respRunning = true;
          break;       

      case 5:

          this->runCounter = 0;
          this->numberCompletes++;
          this->executing = false;
          
          respRunning =  false;
          break;

      default:
          FW_ASSERT(0);
      }
      
      return respRunning;

  }

}
