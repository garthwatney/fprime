/**
 * \file CommandSerializer.cpp
 * \author Auto-coded
 * \brief Command Serializer implementation
 * This is generated by running the testcmd.sh script.
 *
 *
 * \copyright
 * Copyright 2009-2015, by the California Institute of Technology.
 * ALL RIGHTS RESERVED.  United States Government Sponsorship
 * acknowledged. Any commercial use must be negotiated with the Office
 * of Technology Transfer at the California Institute of Technology.
 * <br /><br />
 * This software may be subject to U.S. export control laws and
 * regulations.  By accepting this document, the user agrees to comply
 * with all U.S. export laws and regulations.  User has the
 * responsibility to obtain export licenses, or other export authority
 * as may be required before exporting such information to foreign
 * countries or providing access to foreign persons.
 */

#include "CommandSerializer.hpp"
#include "CommandOpcodes.hpp"
#include "Fw/Com/ComPacket.hpp"

namespace Svc {

    namespace CommandSerializer {
  
  
    Fw::SerializeStatus
    CMD_CLEAR_TRACKING(
          Fw::ComBuffer& comBuffer
      )
    {
      Fw::SerializeStatus status;
      // Reset the buffer
      comBuffer.resetSer();
      // Serialize the command packet type
      FwPacketDescriptorType descriptor = Fw::ComPacket::FW_PACKET_COMMAND;
      status = comBuffer.serialize(descriptor);
      // Serialize the opcode
      if (status == Fw::FW_SERIALIZE_OK) {
        FwOpcodeType opcode = OPCODES::CMD_CLEAR_TRACKING;
        status = comBuffer.serialize(opcode);
      }
      // Serialize arguments
      return status;
    }
    
  
    Fw::SerializeStatus
    CMD_TEST_CMD_1(
              I32 arg1,
              F32 arg2,
              U8 arg3,
          Fw::ComBuffer& comBuffer
      )
    {
      Fw::SerializeStatus status;
      // Reset the buffer
      comBuffer.resetSer();
      // Serialize the command packet type
      FwPacketDescriptorType descriptor = Fw::ComPacket::FW_PACKET_COMMAND;
      status = comBuffer.serialize(descriptor);
      // Serialize the opcode
      if (status == Fw::FW_SERIALIZE_OK) {
        FwOpcodeType opcode = OPCODES::CMD_TEST_CMD_1;
        status = comBuffer.serialize(opcode);
      }
      // Serialize arguments
      if (status == Fw::FW_SERIALIZE_OK) {
        status = comBuffer.serialize(arg1);
      }
      if (status == Fw::FW_SERIALIZE_OK) {
        status = comBuffer.serialize(arg2);
      }
      if (status == Fw::FW_SERIALIZE_OK) {
        status = comBuffer.serialize(arg3);
      }
      return status;
    }
    
  
    Fw::SerializeStatus
    CMD_NO_OP(
          Fw::ComBuffer& comBuffer
      )
    {
      Fw::SerializeStatus status;
      // Reset the buffer
      comBuffer.resetSer();
      // Serialize the command packet type
      FwPacketDescriptorType descriptor = Fw::ComPacket::FW_PACKET_COMMAND;
      status = comBuffer.serialize(descriptor);
      // Serialize the opcode
      if (status == Fw::FW_SERIALIZE_OK) {
        FwOpcodeType opcode = OPCODES::CMD_NO_OP;
        status = comBuffer.serialize(opcode);
      }
      // Serialize arguments
      return status;
    }
    
  }
}

